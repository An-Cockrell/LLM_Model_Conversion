{
      "0": {
            "code_block": "\nbreed [bacteria bacterium]               ;; Defines the bacteria breed",
            "function_name": "\"Define Bacteria\"",
            "variables_referenced": "[bacteria];"
      },
      "1": {
            "code_block": "\nbreed [antibodies antibody]              ;; Defines the antibody breed",
            "function_name": "\"Define Antibodies\"",
            "variables_referenced": "[antibodies]"
      },
      "2": {
            "code_block": "\nbreed [fdcs fdc]                         ;; Defines the FDC breed",
            "function_name": "\"Define FDC Breed\"",
            "variables_referenced": "[fdcs]"
      },
      "3": {
            "code_block": "\nbreed [naive-b-cells naive-b-cell]                   ;; Defines the naive-b-cell breed",
            "function_name": "\"Define Naive B Cells\"",
            "variables_referenced": "[naive-b-cells]"
      },
      "4": {
            "code_block": "\nbreed [activated-b-cells activated-b-cell]\n",
            "function_name": "\"Define Activated B Cells\"",
            "variables_referenced": "[activated-b-cells]"
      },
      "5": {
            "code_block": "\nbreed [gc-b-cells gc-b-cell]",
            "function_name": "\"Define GC B-cells\"",
            "variables_referenced": "[gc-b-cells]"
      },
      "6": {
            "code_block": "\nbreed [sl-plasma-cells sl-plasma-cell]",
            "function_name": "\"Define SL Plasma Cells\"",
            "variables_referenced": "[sl-plasma-cells]"
      },
      "7": {
            "code_block": "\nbreed [ll-plasma-cells ll-plasma-cell]",
            "function_name": "\"Define Lymph Node Plasma Cells\"",
            "variables_referenced": "[ll-plasma-cells]"
      },
      "8": {
            "code_block": "\nbreed [mem-b-cells mem-b-cell]",
            "function_name": "\"Define Mem B Cell\"",
            "variables_referenced": "[mem-b-cells]"
      },
      "9": {
            "code_block": "\nbreed [breg-cells breg-cell]",
            "function_name": "\"Define Breg Cells\"",
            "variables_referenced": "[breg-cells]"
      },
      "10": {
            "code_block": "\nbreed [tfh-cells tfh-cell]",
            "function_name": "\"Define TFH Cells\"",
            "variables_referenced": "[tfh-cells]"
      },
      "11": {
            "code_block": "\nbreed [th0-cells th0-cell]",
            "function_name": "\"Define TH0 Cells\"",
            "variables_referenced": "[th0-cells]"
      },
      "12": {
            "code_block": "\nbreed [th1-cells th1-cell]",
            "function_name": "\"Define TH1 Cells\"",
            "variables_referenced": "[th1-cells]"
      },
      "13": {
            "code_block": "\nbreed [th2-cells th2-cell]",
            "function_name": "\"Define TH2 Cells\"",
            "variables_referenced": "[th2-cells]"
      },
      "14": {
            "code_block": "\nturtles-own [ in-blood bcr isotype csr-bool time-alive tnfa-threshold breg-threshold cd21-level s1pr1-level s1pr2-level cxcr5-level ccr7-level ebi2r-level pro-breg level-of-activation tnf-a-stimulation exposure-number]",
            "function_name": "\"Assign Turtle Variables\"",
            "variables_referenced": "\n[in-blood, bcr, isotype, csr-bool, time-alive, tnfa-threshold, breg-threshold, cd21-level, s1pr1-level, s1pr2-level, cxcr5-level, ccr7-level, ebi2r-level, pro-breg, level-of-activation, tnf-a-stimulation, exposure-number]"
      },
      "15": {
            "code_block": "\nactivated-b-cells-own [ response-type ]",
            "function_name": "\"Define Activated B-Cell Variables\"",
            "variables_referenced": "[response-type]"
      },
      "16": {
            "code_block": "\nmem-b-cells-own [ time-in-follicle ]",
            "function_name": "\"Initialize Memory B Cell Variables\"",
            "variables_referenced": "[time-in-follicle]"
      },
      "17": {
            "code_block": "\nantibodies-own [antibody-type]",
            "function_name": "\"Assign Antibodies Variables\"",
            "variables_referenced": "[antibody-type]"
      },
      "18": {
            "code_block": "\nbacteria-own [ epitope-type num-TI-ep num-TD-ep ]",
            "function_name": "\"Assign Bacteria Variables\"",
            "variables_referenced": "[ epitope-type, num-TI-ep, num-TD-ep ]"
      },
      "19": {
            "code_block": "\nfdcs-own [presented-antigen time-presenting presented-antigen-type responsiveness]",
            "function_name": "\"Define FDC Variables\"",
            "variables_referenced": "[presented-antigen, time-presenting, presented-antigen-type, responsiveness]"
      },
      "20": {
            "code_block": "\nth0-cells-own [r1 r2 rf th1-activation th2-activation tfh-activation]",
            "function_name": "\"Assign th0-cell Variables\"",
            "variables_referenced": "[r1, r2, rf, th1-activation, th2-activation, tfh-activation]"
      },
      "21": {
            "code_block": "\ntfh-cells-own [bcell-binding-status]",
            "function_name": "\"Assign Variables to Tfh Cells\"",
            "variables_referenced": "[bcell-binding-status]"
      },
      "22": {
            "code_block": "\nth1-cells-own [bcell-binding-status]",
            "function_name": "\"Assign Th1 Cell Variables\"",
            "variables_referenced": "[bcell-binding-status]"
      },
      "23": {
            "code_block": "\nth2-cells-own [bcell-binding-status]",
            "function_name": "\"Assign th2-cells Variables\"",
            "variables_referenced": "[bcell-binding-status]"
      },
      "24": {
            "code_block": "\npatches-own [ patch-type s1p-level cxcl13-level ccl19-level ebi2-level il2 il4 il6 il10 il12 il15 il21 if-g if-a tnf-a tgf-b]  ;; note ccl19 and ccl25 both are used for b-cell localization to b/t border",
            "function_name": "\"Assign Patch Variables\"",
            "variables_referenced": "[patch-type, s1p-level, cxcl13-level, ccl19-level, ebi2-level, il2, il4, il6, il10, il12, il15, il21, if-g, if-a, tnf-a, tgf-b]"
      },
      "25": {
            "code_block": "\nglobals [\n  days-passed         ;; Keeps track of the # of days passed since model setup\n  average-cd21-expression\n  total-num-of-apoptosed-cells\n]",
            "function_name": "\"Declare Global Variables\"",
            "variables_referenced": "[days-passed, average-cd21-expression, total-num-of-apoptosed-cells]"
      },
      "26": {
            "code_block": "\nto setup\n  clear-all\n\n  if RandomRuns? = false [random-seed RandomSeed]\n\n  ; Sets up the world structure (lymph node follicle + surrounding paracortex)\n  ask patch 0 0 [ask patches in-radius 200  [set patch-type 1 set pcolor gray ]]                            ; Paracortex (outer) zone\n  ask patch 0 0 [ask patches in-radius 49  [set patch-type 0 set pcolor black]]                             ; Follicle (inner) zone\n  ask patches with [ (pxcor = -50 or pxcor = -49) and abs(pycor) < 5 ] [ set patch-type 2 set pcolor red ]  ; Exit from follicle\n\n  ; Initializes the FDCs\n  create-fdcs 100\n  ;ask fdcs [ set shape 'square' set color brown move-to one-of patches in-radius 30 with [any? fdcs-here = false and any? fdcs-on neighbors = false]]   ; Ensures FDCs don't spawn ontop of eachother\n  ask fdcs [ set shape 'square' set color brown ]\n  ask fdcs [ move-to one-of patches in-radius 30 with [not any? other fdcs in-radius 3]]   ; Ensures FDCs don't spawn ontop of eachother or too close together\n\n\n  ; Initializes the starting population of Tfh cells\n  create-tfh-cells 50\n  ask tfh-cells [ move-to one-of patches with [patch-type = 1] set time-alive -1000 set shape 'square' set color cyan  set cxcr5-level 11 set ccr7-level 6 set ebi2r-level 5 set bcell-binding-status false]\n\n  create-th1-cells 10\n  ask th1-cells [ move-to one-of patches with [patch-type = 1] set time-alive -1000 set shape 'square' set color blue  set cxcr5-level 0 set ccr7-level 2 set ebi2r-level 2 set bcell-binding-status false]\n  create-th2-cells 50\n  ask th2-cells [ move-to one-of patches with [patch-type = 1] set time-alive -1000 set shape 'square' set color blue  set cxcr5-level 0 set ccr7-level 2 set ebi2r-level 2 set bcell-binding-status false]\n  ;; Initialize global variables and counters\n  set days-passed 0\n\n  reset-ticks\nend",
            "function_name": "\"Setup Function\"",
            "variables_referenced": "[RandomRuns?, patches, patch_type, pcolor, patch.pxcor, patch.pycor, fdcs, fdcs.shape, fdcs.color, tfh-cells, tfh-cells.time-alive, tfh-cells.shape, tfh-cells.color, tfh-cells.cxcr5-level, tfh-cells.ccr7-level, tfh-cells.ebi2r-level, tfh-cells.bcell-binding-status, th2-cells, th2-cells.time-alive, th2-cells.shape, th2-cells.color, th2-cells.cxcr5-level, th2-cells.ccr7-level, th2-cells.ebi2r-level, th2-cells.bcell-binding-status, th1-cells, th1-cells.time-alive, th1-cells.shape, th1-cells.color, th1-cells.cxcr5-level, th1-cells.ccr7-level, th1-cells.ebi2r-level, th1-cells.bcell-binding-status, days-passed]"
      },
      "27": {
            "code_block": "\nto go\n  calculate-incoming-tnfa-il6-level\n  ;if ticks > 960 [ ;; start simuluating background inflammation on day 20, or 960 ticks, so that the first inoculation isn't affected by background inflammation\n    simulate-background-inflammation\n  ;]\n\n  ; Calculates the # of days passed from the # of ticks passed\n  set days-passed ticks / 48    ;; 1 tick = 30 minutes, so 48 ticks = 1 day\n\n  spawn-b-cell\n  ;spawn-th0-cell\n\n  ; Cytokine release from paracortex\n  ask patches with [ patch-type = 1 ] [\n   set ccl19-level ccl19-level + 2\n   set ebi2-level ebi2-level + 2\n  ]\n\n  ; Cytokine release from follicle exit\n  ask patches with [ patch-type = 2 ] [\n   set s1p-level s1p-level + 2\n  ]\n\n  ask fdcs [fdc-function]\n  ask naive-b-cells [ naive-b-cell-function ]\n  ask activated-b-cells [ activated-b-cell-function ]\n  ask gc-b-cells [ gc-b-cell-function]\n  ask ll-plasma-cells [ll-plasma-cell-function ]\n  ask sl-plasma-cells [sl-plasma-cell-function ]\n  ask mem-b-cells [mem-b-cell-function]\n  ask antibodies [antibodies-function]\n  ask breg-cells [ breg-function ]\n  ask tfh-cells [ tfh-cell-function ]\n  ask th0-cells [th0-cell-function ]\n  ask th1-cells [th1-cell-function ]\n  ask th2-cells [th2-cell-function ]\n  ask bacteria [ bacteria-function ]\n\n\n\n  update-chemokine-gradient\n\n  check-overall-cd21-expression\n\n  ; Automatically inoculates at specified ticks if autoinoculate? switch is ON\n  if autoinoculate? [\n    if ticks = 480 [    ; At 10 days\n      auto-inoculate first-exposure-amt    ; Variable from interface input\n    ]\n    if ticks = 2880 [   ; At 60 days\n      auto-inoculate second-exposure-amt   ; Variable from interface input\n    ]\n    if ticks = 4800 [   ; Stops the run at 100 days\n      ;setup\n      stop\n    ]\n  ]\n\n;  if count bacteria > 0 and ticks mod 40 = 0[  ; used to linearly clear the bacteria over time\n;    ask one-of bacteria [ die ]\n;  ]\n\n  tick\nend",
            "function_name": "\"Run Simulation\"",
            "variables_referenced": "[RandomRuns, ticks, days-passed, patch-type, patches, fdcs, fdcs.function, naive-b-cells, activated-b-cells, gc-b-cells, ll-plasma-cells, sl-plasma-cells, mem-b-cells, antibodies, breg-cells, tfh-cells, tfh-cell.function, th0-cells, th1-cells, th2-cells, bacteria, ccl19-level, ebi2-level, s1p-level, autoinoculate, first-exposure-amt, second-exposure-amt, antibodies.function, breg-function, mem-b-cell-function, sl-plasma-cell-function, ll-plasma-cell-function, gc-b-cell-function, activated-b-cell-function, naive-b-cell-function, fdc-function, update-chemokine-gradient, check-overall-cd21-expression]"
      },
      "28": {
            "code_block": "\nto spawn-b-cell\n  if ticks mod 10 = 0 [\n    create-naive-b-cells 1 [ set shape 'circle' set color white set size 1 setxy 49 0\n      set time-alive 0\n      set bcr random 30\n      set isotype 'md'              ;; isotype of 'md' is IgM/IgD coexpresion. 'd' is IgD, 'm' is IgM, 'a' is IgA, 'g' is IgG, 'e' is IgE\n      set s1pr1-level 0\n      set s1pr2-level 0\n      set cxcr5-level 16\n      set ccr7-level 0\n      set ebi2r-level 0\n      set cd21-level 0\n      set in-blood false\n\n      set tnfa-threshold (bcell-tnfa-apop-threshold + random 50)\n      set breg-threshold (bcell-breg-diff-threshold + random 50)\n    ]\n  ]\nend",
            "function_name": "\"Spawn Naive B Cells\"",
            "variables_referenced": "[b-cells, ticks, time-alive, bcr, isotype, s1pr1-level, s1pr2-level, cxcr5-level, ccr7-level, ebi2r-level, cd21-level, in-blood, tnfa-threshold, breg-threshold]"
      },
      "29": {
            "code_block": "\nto spawn-th0-cell\n  if ticks mod 20 = 0 [\n    create-th0-cells 1 [ set shape 'square' set color yellow\n      move-to one-of patches with [patch-type = 1]\n      set time-alive 0\n      set s1pr1-level 0\n      set s1pr2-level 0\n      set cxcr5-level 0\n      set ccr7-level 6\n      set ebi2r-level 6\n      set in-blood false\n    ]\n  ]\nend",
            "function_name": "\"Spawn TH0 Cells\"",
            "variables_referenced": "[ticks, patches, patch_type, shape, color, time-alive, s1pr1-level, s1pr2-level, cxcr5-level, ccr7-level, ebi2r-level, in-blood]"
      },
      "30": {
            "code_block": "\nto fdc-function\n  ; Secretes the cytokines below\n  set cxcl13-level cxcl13-level + 2\n  set il4 il4 + 1\n  set il6 il6 + 2\n  ;set il6 il6 + 1\n  set il15 il15 + 2\n  set il12 il12 + 2\n\n  ; If FDC is presenting antigen, determines when it will stop presenting it\n  if presented-antigen != 0 [     ; presented-antigen = 0 represents no presented antigen\n    set time-presenting time-presenting + 1\n  ]\n  if time-presenting = 300 [      ; Stops presenting the antigen after 300 ticks / 6 days\n    set presented-antigen 0\n    set color brown\n    set presented-antigen-type 0\n    set time-presenting 0\n  ]\n\n  calculate-fdc-responsiveness\nend",
            "function_name": "\"FDC Function\"",
            "variables_referenced": "[cxcl13-level, il4, il6, il15, il12, presented-antigen, time-presenting, time-presenting, presented-antigen-type, color]"
      },
      "31": {
            "code_block": "\nto calculate-fdc-responsiveness\n  if responsiveness > 0 [\n    set responsiveness responsiveness - 0.01\n  ]\nend",
            "function_name": "\"Calculate FDC Responsiveness\"",
            "variables_referenced": "[responsiveness]"
      },
      "32": {
            "code_block": "\nto antibodies-function\n  set time-alive time-alive + 1\n  if time-alive > 900 [\n    die\n  ]\nend",
            "function_name": "\"Antibodies Function\"",
            "variables_referenced": "[time-alive]"
      },
      "33": {
            "code_block": "\nto naive-b-cell-function\n  set cd21-level 300 - (il6 * 50 + il10 * 0)     ; Calculates CD21 exppression based off of il6 and il10 levels (scaled) in current patch\n\n  if patch-type = 2 [         ; Represents naive b cell exiting the follicle\n    die\n  ]\n\n  ;; Checks if naive b-cell is in contact with an antigen-bound APC or free-floating antigen\n  let apc one-of fdcs-here\n  let random-encounter random 100\n  let antigen one-of bacteria-here\n  if (apc != nobody and [presented-antigen] of apc != 0 and [responsiveness] of apc > random-encounter) or antigen != nobody[\n\n    ; Only activates if the B-cell's cd21 level is above the cd21 threshold (bcell-cd21-activation-threshold is defined in the interface slider)\n    ifelse cd21-level > bcell-cd21-activation-threshold [\n      ;print word (word breed ' activating with cd21-level at: ') cd21-level\n      set breed activated-b-cells\n      set il6 il6 + phag-il6-burst\n      set pro-breg 0\n      set shape 'circle'\n      set size 1\n      set color yellow\n      set csr-bool false\n      set time-alive 0\n      ifelse antigen != nobody [\n        ; Randomly picks whether the B-cell binds to a TI epitope or a TD epitope\n        ;let rTI random [num-TI-ep] of antigen\n        ;let rTD random [num-TD-ep] of antigen\n        let rTI random 100\n        let rTD random 100\n        ifelse rTI > rTD [\n          set response-type 1   ; Response-type of 1 represents a TI response\n        ][\n          set response-type 2   ; Response-type of 2 represents a TD response\n\n          ; If TD response, B-cell upregulates ccr7 and ebi2r to localize to paracortex\n          set ccr7-level 12\n          set ebi2r-level 12\n        ]\n        ask antigen [ die ]\n      ][\n        if apc != nobody [\n          let rTI random 100\n          let rTD random 100\n          ifelse rTI > rTD [\n            set response-type 1\n          ][\n            set response-type 2\n            set ccr7-level 12\n            set ebi2r-level 12\n          ]\n          ;set response-type [presented-antigen-type] of apc\n        ]\n      ]\n    ][\n      ;print  word (word breed 'NOT activating with cd21-level at: ' ) cd21-level\n    ]\n  ]\n\n  chemotaxis\n  move\n\n  check-breg-status   ; Checks level of stimulation of b-reg differentiation\n  check-tnf-status    ; Checks level of TNF-a stimulation for apoptosis\n\n  if time-alive > 300 [\n    set s1pr1-level s1pr1-level + 0.5 ;; this slowly increases the # of s1p receptors (s1pr) in the naive b cell when the b-cell is old enough\n  ]\n\n  set time-alive time-alive + 1\n  if time-alive > 1000 [\n    die\n  ]\nend",
            "function_name": "\"Naive B Cell Function\"",
            "variables_referenced": "[cd21-level, il6, phag-il6-burst, il10, patch_type, patch.pxcor, patch.pycor, fdcs, fdcs.presented-antigen, apc, random-encounter, antigen, num-TI-ep, num-TD-ep, breed, rTI, rTD, response-type, apc.presented-antigen-type, time-alive, s1pr1-level, days-passed, tick]"
      },
      "34": {
            "code_block": "\n\nto breg-function\n  ; Secretes the below cytokines\n  set il10 il10 + 5\n  set tgf-b tgf-b + 1\n\n  chemotaxis\n  ;breg-move\n  move\n  check-tnf-status\n\n  set time-alive time-alive + 1\n  if time-alive > 300 [ ; used to be 300\n    die\n  ]\nend",
            "function_name": "\"Breg Function\"",
            "variables_referenced": "[il10, tgf-b, time-alive, tnf-a-stimulation, time-alive, breg-threshold, chemotaxis]"
      },
      "35": {
            "code_block": "\nto activated-b-cell-function\n\n  if in-blood = false [\n    ; Only performs the following commands if currently inside the follicle, and NOT in the blood/lymph\n    if patch-type = 2 [   ; If the cell reaches the follicle exit (patch-type 2)\n      set in-blood true\n      hide-turtle\n    ]\n\n    isotype-switch   ; Determines which isotype to switch to\n\n    ifelse response-type = 2 [\n      td-response\n    ][\n      ifelse response-type = 1 [\n        ti-response\n      ][\n        ; activated-mem-response    ;THIS IS NOT CURRENTLY BEING USED, KEPT IN CASE WE WANT EFFECTOR MEM FUNCTION TO BE DIFFERENT FROM NORMAL B-CELLs\n      ]\n    ]\n\n    ;check-breg-status\n\n    chemotaxis\n    move\n  ]\n\n  check-tnf-status\n\n  set time-alive time-alive + 1\n  if time-alive > 300 [\n    die\n  ]\nend",
            "function_name": "\"Activated B Cell Function\"",
            "variables_referenced": "\n[in-blood, patch-type, isotype-switch, response-type, td-response, ti-response, activated-mem-response, check-breg-status, chemotaxis, time-alive]"
      },
      "36": {
            "code_block": "\nto isotype-switch\n  if csr-bool = false [\n      let igM-bucket 0\n      let igD-bucket 0\n      let igA-bucket 0\n      let igG-bucket 0\n      let igE-bucket 0\n\n      set igM-bucket il12 + il15 + il6\n      ;set igD-bucket   ;seems igD differentiation isnt stimulated by anything\n      set igA-bucket il10 + il15 + il21 + tgf-b\n      set igG-bucket il4 + il10 + il15 + il21\n      set igE-bucket il4 - il12 - if-a - if-g - tgf-b + il21\n\n      let max_index 0\n      let mylist (list 3 igM-bucket igA-bucket igG-bucket igE-bucket )\n      foreach (list 1 2 3 4) [\n        [x] ->\n        let value item x mylist\n        if value > item max_index mylist [\n          set max_index x\n        ]\n      ]\n\n      if max_index = 1 [\n        set csr-bool true\n        set isotype 'm'\n      ]\n      if max_index = 2 [\n        set csr-bool true\n        set isotype 'a'\n      ]\n      if max_index = 3 [\n        set csr-bool true\n        set isotype 'g'\n      ]\n      if max_index = 4 [\n        set csr-bool true\n        set isotype 'e'\n      ]\n    ]\nend\n",
            "function_name": "\"Isotype Switch Procedure\"",
            "variables_referenced": "[csr-bool, igM-bucket, igD-bucket, igA-bucket, igG-bucket, igE-bucket, max\\_index, mylist]"
      },
      "37": {
            "code_block": "\nto td-response\n  ; The activated B-cell can get help from either a Tfh cell or a Th2 cell\n  let tfh one-of tfh-cells-here\n  let th2 one-of th2-cells-here\n  ifelse tfh != nobody [\n    set breed gc-b-cells\n    set pro-breg 0\n    set color orange\n    set shape 'circle'\n    set size 1\n    set time-alive 0\n    create-link-with tfh [ tie ]\n    ask tfh [ set ebi2r-level 0 set ccr7-level 0 set bcell-binding-status true]\n  ][\n   if th2 != nobody [\n      set breed gc-b-cells\n      set pro-breg 0\n      set color orange\n      set shape 'circle'\n      set size 1\n      set time-alive 0\n      create-link-with th2 [ tie ]\n      ask th2 [ set ebi2r-level 0 set ccr7-level 0 set bcell-binding-status true]\n    ]\n  ]\nend",
            "function_name": "\"td-response\"",
            "variables_referenced": "[tfh-cells, tfh, th2-cells, th2, breed, pro-breg, color, shape, time-alive, links, link, tfh.ebi2r-level, tfh.ccr7-level, tfh.bcell-binding-status, th2.ebi2r-level, th2.ccr7-level, th2.bcell-binding-status]"
      },
      "38": {
            "code_block": "\nto ti-response\n  ; Activated B-cells undergoing TI response secrete TNF-a\n  set tnf-a tnf-a + 1\n\n  if time-alive mod 70 = 0 [      ; This is used to represent the rate of proliferation\n    ;let proPC (il21 + il10 + if-a + if-g ) * 5    ; Scaled to create reasonable plasma cell populations\n    let proPC (il21 + il10 + if-a + if-g ) * 10\n    ;let proMem (il21 + il4); * 100\n    let proMem 0\n    ifelse proPC > proMem [\n      hatch-sl-plasma-cells 1 [ set time-alive 0 set color lime + 3 set shape 'circle' set size 1 set s1pr1-level 0 set pro-breg 0]\n    ][\n      ifelse ticks < 2800 [\n        hatch-mem-b-cells 1 [set exposure-number 1 set time-alive 0 set color white set shape 'target' set s1pr1-level 10 set pro-breg 0 set cd21-level 0 set cxcr5-level 10 ]\n        ;hatch-mem-b-cells 1 [set exposure-number 1 set time-alive 0 set color white set shape 'target' set s1pr1-level 0 set pro-breg 0 set cd21-level 0 set cxcr5-level 10]\n      ][\n        hatch-mem-b-cells 1 [set exposure-number 2 set time-alive 0 set color white set shape 'target' set s1pr1-level 10 set pro-breg 0 set cd21-level 0 set cxcr5-level 10 ]\n        ;hatch-mem-b-cells 1 [set exposure-number 2 set time-alive 0 set color white set shape 'target' set s1pr1-level 0 set pro-breg 0 set cd21-level 0 set cxcr5-level 10]\n      ]\n    ]\n  ]\nend",
            "function_name": "\"TI Response Function\"",
            "variables_referenced": "[tnf-a, time-alive, il21, il10, if-a, if-g, proPC, proMem, pro-breg, s1pr1-level, hatch-sl-plasma-cells, hatch-mem-b-cells, exposure-number, cxcr5-level, set]"
      },
      "39": {
            "code_block": "\nto gc-b-cell-function\n  if in-blood = false [\n    if patch-type = 2 [\n      set in-blood true\n      hide-turtle\n    ]\n\n    ; Downregulates ebi2r and ccr7 so it can localize to follicle center again\n    set ebi2r-level 0\n    set ccr7-level 0\n\n    ; The GC B-cell only moves if it has not yet reached the follicle center\n    ifelse distance patch 0 0 > 15 [\n      chemotaxis\n      gc-move\n    ][\n      ; Once the GC B-cell reaches the follicle center, it performs the below:\n      ;let proPC (il21 + il10 + if-a + if-g ) * 8  ; Scaled for reasonable plasma cell populations\n      let proPC2 (il21 + il10 * 2 + if-a + if-g)  ;* 6\n      let proMem2 (il21 + il4)\n      let proPC random proPC2\n      let proMem random proMem2\n      ;let proPC random 100        ;randomly choosing if it hatches a llpc or a mem b cell\n      ;let proMem random 100\n\n      if time-alive mod 80 = 0 [  ; For now, hard-coded to represent rate of proliferatoin. Should be influenced by cytokines from state diagram\n        ifelse proPC > proMem [\n          ifelse ticks < 2800 [\n            hatch-ll-plasma-cells 1 [ set exposure-number 1 set time-alive 0 set color lime set shape 'circle' set size 1 set s1pr1-level 40 set pro-breg 0 set tnfa-threshold tnfa-threshold - 130]\n          ] [\n            hatch-ll-plasma-cells 1 [ set exposure-number 2 set time-alive 0 set color lime set shape 'circle' set size 1 set s1pr1-level 40 set pro-breg 0 set tnfa-threshold tnfa-threshold - 130]\n          ]\n        ][\n          ifelse ticks < 2800 [\n            hatch-mem-b-cells 1 [set exposure-number 1 set time-alive 0 set color white set shape 'target' set s1pr1-level 10 set pro-breg 0 set cd21-level 0 set cxcr5-level 10 ]\n            ;hatch-mem-b-cells 1 [set exposure-number 1 set time-alive 0 set color white set shape 'target' set s1pr1-level 0 set pro-breg 0 set cd21-level 0 set cxcr5-level 10]\n          ][\n            hatch-mem-b-cells 1 [set exposure-number 2 set time-alive 0 set color white set shape 'target' set s1pr1-level 10 set pro-breg 0 set cd21-level 0 set cxcr5-level 10 ]\n            ;hatch-mem-b-cells 1 [set exposure-number 2 set time-alive 0 set color white set shape 'target' set s1pr1-level 0 set pro-breg 0 set cd21-level 0 set cxcr5-level 10]\n          ]\n        ]\n      ]\n    ]\n\n    ;check-breg-status\n  ]\n\n  check-tnf-status\n\n  set time-alive time-alive + 1\n  if time-alive > 700 [\n    ask link-neighbors [ set bcell-binding-status false ]  ; Once the GC B-cell dies, frees the bound Tfh or TH2 cell\n    die\n  ]\nend",
            "function_name": "\"GC B-Cell Function\"",
            "variables_referenced": "[in-blood, patch-type, patches, patch.pxcor, patch.pycor, il21, il4, il10, if-a, if-g, proPC2, proMem2, ticks, time-alive, s1pr1-level, pro-breg, tnfa-threshold, exposure-number, cxcr5-level, link-neighbors, bcell-binding-status]"
      },
      "40": {
            "code_block": "\nto sl-plasma-cell-function\n  if in-blood = false [\n    if patch-type = 2 [\n      set in-blood true\n      hide-turtle\n    ]\n    check-breg-status\n    chemotaxis\n    move\n  ]\n\n  if time-alive mod 50 = 0 [  ; For now, hard-coded to represent rate of proliferatoin. Should be influenced by cytokines from state diagram\n    hatch-antibodies 1 [ set time-alive 0 set antibody-type isotype set hidden? true ]\n  ]\n\n  check-tnf-status\n\n  set time-alive time-alive + 1\n  if time-alive > 240 + (il6 + il21) * 10 [\n      die\n  ]\nend",
            "function_name": "\"SL Plasma Cell Function\"",
            "variables_referenced": "\n[in-blood, patch-type, check-breg-status, chemotaxis, move, time-alive, isotype, patch.pxcor, patch.pycor, antibodies, antibodies.time-alive, antibodies.antibody-type, antigen.il6, antigen.il21]"
      },
      "41": {
            "code_block": "\nto ll-plasma-cell-function\n  ifelse in-blood = false [\n    if patch-type = 2 [\n      set in-blood true\n      hide-turtle\n    ]\n\n    check-breg-status\n\n    chemotaxis\n    move\n  ][\n    if time-alive mod 200 = 0 [ ; For now, hard-coded to represent rate of proliferatoin. Should be influenced by cytokines from state diagram\n      hatch-antibodies 1 [ set time-alive 0 set antibody-type isotype set hidden? true  ]\n    ]\n  ]\n\n  check-tnf-status\n\n  set time-alive time-alive + 1\n  if time-alive > 8000 + (il6 + il21) * 10 [\n      die\n  ]\nend",
            "function_name": "\"Plasma Cell Loop Function\"",
            "variables_referenced": "[in-blood, patch-type, isotype, il6, il21, antibodies, hidden?, time-alive, tnf-a-stimulation]"
      },
      "42": {
            "code_block": "\nto mem-b-cell-function\n  ; Sets the cd21 expression level based off of il6 and il10 in current patch\n  set cd21-level 300 - (il6 * 50 + il10 * 0)\n\n  if patch-type = 2 [\n    setxy 49 0\n    set pro-breg 0\n    set s1pr1-level 0\n    set time-in-follicle 0\n  ]\n\n  set time-in-follicle time-in-follicle + 1\n  if time-in-follicle > 300 [\n    set s1pr1-level s1pr1-level + 0.5 ;; this slowly increases the # of s1p receptors (s1pr) in the naive b cell when the b-cell is old enough\n  ]\n\n  set time-alive time-alive + 1\n  if time-alive > 15000 [\n    die\n  ]\n\n  let apc one-of fdcs-here\n  let random-encounter random 100\n  let antigen one-of bacteria-here\n  if (apc != nobody and [presented-antigen] of apc != 0 and [responsiveness] of apc > random-encounter) or antigen != nobody[\n    ifelse cd21-level > bcell-cd21-activation-threshold [\n      ;print word (word breed ' activating with cd21-level at: ') cd21-level\n      set breed activated-b-cells\n      set il6 il6 + phag-il6-burst\n      set cxcr5-level 16\n      set s1pr1-level 0\n      set pro-breg 0\n      set shape 'circle'\n      set size 1\n      set color yellow\n      set csr-bool false\n      set time-alive 100\n      ifelse antigen != nobody [\n        ;let rTI random [num-TI-ep] of antigen\n        ;let rTD random [num-TD-ep] of antigen\n        let rTI random 100\n        let rTD random 100\n        ifelse rTI > rTD [\n          set response-type 1   ; 1 is TI response\n        ][\n          set response-type 2   ; 2 is TD\n          set ccr7-level 12\n          set ebi2r-level 12\n        ]\n        ask antigen [ die ]\n      ][\n        if apc != nobody [\n          let rTI random 100\n          let rTD random 100\n          ifelse rTI > rTD [\n            set response-type 1\n          ][\n            set response-type 2\n            set ccr7-level 12\n            set ebi2r-level 12\n          ]\n          ;set response-type [presented-antigen-type] of apc\n        ]\n      ]\n    ][\n      ;print  word  (word breed ' NOT activating with cd21-level at: ') cd21-level\n    ]\n  ]\n  check-breg-status\n\n  chemotaxis\n  move\n\n  check-tnf-status\nend",
            "function_name": "\"Memory B Cell Function\"",
            "variables_referenced": "[RandomRuns, patches, patch_type, pcolor, patch.pxcor, patch.pycor, fdcs, fdcs.shape, fdcs.color, apc, apc.presented-antigen, apc.responsiveness, antigen, breed, il6, phag-il6-burst, cxcr5-level, s1pr1-level, pro-breg, shape, size, color, csr-bool, time-alive, response-type, rTI, rTD, tnfa, tnfa-threshold, time-in-follicle, s1pr, naive-b-cells, activated-b-cells, bcell-cd21-activation-threshold]"
      },
      "43": {
            "code_block": "\nto th0-cell-function\n  let pro-TH1 (il12 + if-g) * 100\n  let pro-TH2 (il10 + il4) * 100\n  let pro-TFH (il21 + il12) * 100\n  let rTH1 random pro-TH1\n  let rTH2 random pro-TH2\n  let rTFH random pro-TFH\n  set r1 rTH1\n  set r2 rTH2\n  set rf rTFH\n  if rTH1 > rTH2 and rTH1 > rTFH [\n    set th1-activation th1-activation + 1\n  ]\n  if rTH2 > rTH1 and rTH2 > rTFH [\n    set th2-activation th2-activation + 1\n  ]\n  if rTFH > rTH1 and rTFH > rTH2 [\n    set tfh-activation tfh-activation + 1\n  ]\n\n  ifelse th1-activation >= 20 [\n    set breed TH1-cells\n    set color blue\n    set time-alive 0\n    set size 1\n    set shape 'circle'\n  ][\n    ifelse th2-activation >= 20 [\n      set breed th2-cells\n      set color blue\n      set size 1\n      set shape 'circle'\n      set time-alive 0\n      set bcell-binding-status false\n    ][\n      if tfh-activation >= 20 [\n        set breed tfh-cells\n        set cxcr5-level 10\n        set color cyan\n        set shape 'circle'\n        set size 1\n        set time-alive 0\n        set bcell-binding-status false\n        set cxcr5-level 10\n      ]\n    ]\n  ]\n\n  chemotaxis\n  move\n\n  set time-alive time-alive + 1\n  if time-alive > 300\n    [die]\nend",
            "function_name": "\"TH0 Cell Function\"",
            "variables_referenced": "[il12, if-g, il10, il4, il21, il12, rTH1, rTH2, rTFH, r1, r2, rf, th1-activation, th2-activation, tfh-activation, breed, color, size, shape, time-alive, bcell-binding-status, cxcr5-level, chemotaxis, move]"
      },
      "44": {
            "code_block": "\nto tfh-cell-function\n  if distance patch 0 0 > 20 or bcell-binding-status = false [\n    chemotaxis\n    move\n  ]\n\n  ; Secretes the following cytokines\n  set il21 il21 + 1\n  set il4 il4 + 1\n  set il2 il2 + 1\n  set il10 il10 + 1\n\n  set time-alive time-alive + 1\n  ;if time-alive > 500\n    ;[die]\nend",
            "function_name": "\"Tfh Cell Function\"",
            "variables_referenced": "[distance, patch00, bcell-binding-status, il21, il4, il2, il10, time-alive, chemotaxis, move]"
      },
      "45": {
            "code_block": "\nto th1-cell-function\n  chemotaxis\n  move\n\n  ; Secretes the following cytokines\n  set if-g if-g + 1\n\n  set time-alive time-alive + 1\n  ;if time-alive > 500\n    ;[die]\nend",
            "function_name": "\"th1 Cell Function\"",
            "variables_referenced": "[time-alive, if-g, chemotaxis]"
      },
      "46": {
            "code_block": "\nto th2-cell-function\n  if distance patch 0 0 > 20 or bcell-binding-status = false [\n    chemotaxis\n    move\n  ]\n\n  ; Secretes the following cytokines\n  set il4 il4 + 1\n  set il10 il10 + 1\n\n  set time-alive time-alive + 1\n  ;if time-alive > 500 [\n    ;die\n  ;]\nend",
            "function_name": "\"TH2 Cell Function\"",
            "variables_referenced": "[distance, patch, 0, 0, bcell-binding-status, il4, il10, time-alive, chemotaxis, move]"
      },
      "47": {
            "code_block": "\nto bacteria-function\n  if patch-type = 2 [ ;; for bacteria, im having them recirculate through blood. when recirculating, they can either just go back into LN, or can be captured by FDC. random chance of either\n    ; Randomly chooses if bacteria will recirculate or will be captured by FDC\n    let x random 2\n    ifelse x = 0 [\n      setxy 49 0\n      set s1pr1-level 0\n    ][\n      if any? fdcs with [presented-antigen = 0] [\n        ask one-of fdcs with [presented-antigen = 0] [\n          set time-presenting 0\n          set presented-antigen bacteria-epitope-type\n          set color red\n          let rTI random number-of-TI-epitopes\n          let rTD random number-of-TD-epitopes\n          ifelse rTI > rTD [\n            set presented-antigen-type 1   ;; 1 is TI epitope to be presented\n          ][\n            set presented-antigen-type 2    ;; 2 is TD epitope to be presented\n          ]\n        ]\n        die\n      ]\n    ]\n  ]\n  set s1pr1-level s1pr1-level + 0.004\n  chemotaxis\n  move\nend",
            "function_name": "\"Bacteria Function\"",
            "variables_referenced": "[x, rTI, rTD, presented-antigen, time-presenting, bacteria-epitope-type, patch-type, fdcs, fdcs.presented-antigen, fdcs.time-presenting, fdcs.color, s1pr1-level]"
      },
      "48": {
            "code_block": "\nto check-breg-status\n  ifelse pro-breg > breg-threshold [\n    ;print word breed ' turned into breg'\n    set breed breg-cells\n    set size 1\n    set shape 'circle'\n    set color violet\n    set s1pr1-level 0 ; to keep breg cell localized to where all the action is\n    set cxcr5-level 10\n    set time-alive 0\n\n  ][\n    set pro-breg (il6 + il21) * 45\n  ]\nend",
            "function_name": "\"Check Breg Status\"",
            "variables_referenced": "[pro-breg, breg-threshold, breed, size, shape, color, s1pr1-level, cxcr5-level, time-alive, il6, il21]"
      },
      "49": {
            "code_block": "\nto check-tnf-status\n  set tnf-a tnf-a - 0.01 ;;represents consumption of TNFa\n  set tnf-a-stimulation 100 * tnf-a\n\n  if tnf-a-stimulation > tnfa-threshold [\n    ;print word breed 'APOPTOSE with tnf: ' print tnf-a-stimulation\n    set total-num-of-apoptosed-cells total-num-of-apoptosed-cells + 1\n    die\n  ]\nend",
            "function_name": "\"Check TNF-Status\"",
            "variables_referenced": "[tnf-a, tnf-a-stimulation, tnfa-threshold]"
      },
      "50": {
            "code_block": "\nto update-chemokine-gradient\n  diffuse cxcl13-level 1   ;; determines the mobility/solubility of cxcl13\n  diffuse ccl19-level 1\n  diffuse s1p-level 1\n  diffuse ebi2-level 1\n  diffuse il2 1\n  diffuse il4 1\n  diffuse il6 1\n  diffuse il10 1\n  diffuse il12 1\n  diffuse il15 1\n  diffuse il21 1\n  diffuse if-g 1\n  diffuse if-a 1\n  diffuse tnf-a 1\n  diffuse tgf-b 1\n\n  ask patches [\n    set cxcl13-level cxcl13-level * 0.9  ;; takes into account protease-driven degradation of cxcl13\n    set ccl19-level ccl19-level * 0.9\n    set ebi2-level ebi2-level * 0.9\n    set s1p-level s1p-level * 0.9\n    set il2 il2 * 0.9\n    set il4 il4 * 0.9\n    set il6 il6 * 0.95\n    set il10 il10 * 0.95\n    set il12 il12 * 0.9\n    set il15 il15 * 0.9\n    set il21 il21 * 0.9\n    set if-g if-g * 0.9\n    set if-a if-a * 0.9\n    set tnf-a tnf-a * 0.9\n    set tgf-b tgf-b * 0.9\n\n    ; Used to visualize the cytokine levels in the follicle, based off of the interface chooser\n    if patch-type = 0 [\n      ;let total-cytokine-level il2 + il4 + il6 + il10 + il12 + il15 + il21 + tnf-a + tgf-b + if-a + if-g\n      if cytokine-to-visualize = 'tnf-a' [\n        set pcolor scale-color green tnf-a 0.1 3  ;;used to visualize cxcl13 or ccl19 gradient\n      ]\n      if cytokine-to-visualize = 'il6' [\n        set pcolor scale-color green il6 0.1 3  ;;used to visualize cxcl13 or ccl19 gradient\n      ]\n      if cytokine-to-visualize = 'il10' [\n        set pcolor scale-color green il10 0.1 3  ;;used to visualize cxcl13 or ccl19 gradient\n      ]\n      if cytokine-to-visualize = 's1p' [\n        set pcolor scale-color green s1p-level 0.01 3  ;;used to visualize cxcl13 or ccl19 gradient\n      ]\n    ]\n  ]\nend",
            "function_name": "\"Update Chemokine Gradient\"",
            "variables_referenced": "[cxcl13-level, ccl19-level, s1p-level, ebi2-level, il2, il4, il6, il10, il12, il15, il21, if-g, if-a, tnf-a, tgf-b, patches, patch.patch-type, patch.pcolor, patch.pxcor, patch.pycor, cytokine-to-visualize, total-cytokine-level]"
      },
      "51": {
            "code_block": "\nto inoculate\n  ask up-to-n-of (number-of-bacteria / 2) fdcs [\n    set time-presenting 0\n    set presented-antigen bacteria-epitope-type\n   ;set color 15 + (presented-antigen - 1) * 30\n    set color red\n\n    let rTI random number-of-TI-epitopes\n    let rTD random number-of-TD-epitopes\n    ifelse rTI > rTD [\n      set presented-antigen-type 1   ;; 1 is TI\n    ][\n      set presented-antigen-type 2    ;; 2 is TD\n    ]\n  ]\n\n  create-bacteria (number-of-bacteria / 2) [                            ;; Creates bacteria. 'number-of-bacteria' is a variable controlled by an interface slider\n    ;set color 15 + (bacteria-epitope-type - 1) * 30               ;; Sets the color of the bacteria based on epitope type. Uses netlogo's 0-139 color scale (integer values)\n    set color red\n    set shape 'bug'\n    set size 2\n    setxy 49 0\n    set s1pr1-level 8\n    set time-alive 0\n    set in-blood false\n    set epitope-type bacteria-epitope-type                        ;; Sets the bacteria's epitope-type. 'bacteria-epitope-type' is a value is from an interface slider\n    set num-TI-ep number-of-TI-epitopes\n    set num-TD-ep number-of-TD-epitopes\n  ]\nend",
            "function_name": "\"Inoculate Function\"",
            "variables_referenced": "[RandomRuns, patches, patch_type, pcolor, patch.pxcor, patch.pycor, fdcs, fdcs.time-presenting, fdcs.presented-antigen, fdcs.color, fdcs.shape, fdcs.rTI, fdcs.rTD, fdcs.presented-antigen-type, bacteria, bacteria.color, bacteria.shape, bacteria.size, bacteria.xy, bacteria.s1pr1-level, bacteria.time-alive, bacteria.in-blood, bacteria.epitope-type, bacteria.num-TI-ep, bacteria.num-TD-ep]"
      },
      "52": {
            "code_block": "\nto auto-inoculate [num-bac]\n\n  ;ask up-to-n-of max (list 60 num-bac) fdcs [\n  let num-phagocytosed-bac min (list round (num-bac * 0.8) 100)\n  let num-free-bac num-bac - num-phagocytosed-bac\n\n  ask up-to-n-of num-phagocytosed-bac fdcs [\n\n    set responsiveness min (list (responsiveness + 50) 100)\n    ;set responsiveness 100\n    set time-presenting 0\n    set presented-antigen bacteria-epitope-type\n   ;set color 15 + (presented-antigen - 1) * 30\n    set color red\n\n    let rTI random number-of-TI-epitopes\n    let rTD random number-of-TD-epitopes\n    ifelse rTI > rTD [\n      set presented-antigen-type 1   ;; 1 is TI\n    ][\n      set presented-antigen-type 2    ;; 2 is TD\n    ]\n  ]\n\n  create-bacteria num-free-bac [                            ;; Creates bacteria. 'number-of-bacteria' is a variable controlled by an interface slider\n    ;set color 15 + (bacteria-epitope-type - 1) * 30               ;; Sets the color of the bacteria based on epitope type. Uses netlogo's 0-139 color scale (integer values)\n    set color red\n    set shape 'bug'\n    set size 2\n    setxy 49 0\n    ;set s1pr1-level 8\n    set time-alive 0\n    set in-blood false\n    set epitope-type bacteria-epitope-type                        ;; Sets the bacteria's epitope-type. 'bacteria-epitope-type' is a value is from an interface slider\n    set num-TI-ep number-of-TI-epitopes\n    set num-TD-ep number-of-TD-epitopes\n  ]\nend\n",
            "function_name": "\"Auto Inoculate Function\"",
            "variables_referenced": "\n[num-bac, num-phagocytosed-bac, num-free-bac, fdcs, fdcs.responsiveness, fdcs.time-presenting, fdcs.presented-antigen, fdcs.color, fdcs.presented-antigen-type, rTI, rTD, bacteria, bacteria.color, bacteria.shape, bacteria.size, bacteria.xy, bacteria.s1pr1-level, bacteria.time-alive, bacteria.in-blood, bacteria.epitope-type, bacteria.num-TI-ep, bacteria.num-TD-ep]"
      },
      "53": {
            "code_block": "\nto calculate-incoming-tnfa-il6-level\n  ask patches [set tnf-a tnf-a + ((count bacteria) / 500)]\n  ask patches [set il6 il6 + ((count bacteria) / 500)]\nend\n",
            "function_name": "\"Calculate Incoming TL1A and IL6 Level\"",
            "variables_referenced": "[patches, tnf-a, il6, count, bacteria]"
      },
      "54": {
            "code_block": "\nto simulate-background-inflammation\n  ask patches [set tnf-a tnf-a + background-tnfa]\n  ask patches [set il6 il6 + background-il6]\nend",
            "function_name": "\"Simulate Background Inflammation\"",
            "variables_referenced": "\n[patches, tnf-a, il6, background-tnfa, background-il6]"
      },
      "55": {
            "code_block": "\nto check-overall-cd21-expression\n  if ticks mod 20 = 0 [     ; Only calculating avg CD21 expression every 50 ticks to increase run speed\n    set average-cd21-expression 0\n    ask naive-b-cells [\n      set average-cd21-expression average-cd21-expression + cd21-level\n    ]\n    ask mem-b-cells [\n      set average-cd21-expression average-cd21-expression + cd21-level\n    ]\n\n    ifelse count naive-b-cells != 0 or count mem-b-cells != 0 [\n      set average-cd21-expression average-cd21-expression / (count naive-b-cells + count mem-b-cells)\n    ][\n      set average-cd21-expression 0\n    ]\n  ]\nend",
            "function_name": "\"Calculate CD21 Average\"",
            "variables_referenced": "[ticks, naive-b-cells, mem-b-cells, average-cd21-expression, cd21-level]"
      },
      "56": {
            "code_block": "\nto chemotaxis\n  let rt-turn 0\n  let lt-turn 0\n\n\n  let s1pr1-weight s1pr1-level / 100\n  let max-s1p-patch max-one-of neighbors [s1p-level]  ;; or neighbors4\n  let angle-to-s1p (towards max-s1p-patch)\n  let cur-angle heading\n  let x angle-to-s1p - cur-angle\n  if x < 0 [\n    set x x + 360\n  ]\n  let y 360 - x\n  ifelse x < y\n  [ set rt-turn rt-turn + x * s1pr1-weight ]\n  [ set lt-turn lt-turn + y * s1pr1-weight ]\n\n  let s1pr2-weight s1pr2-level / 100\n  let max-s1pr2-patch max-one-of neighbors [s1p-level]  ;; or neighbors4\n  let angle-to-s1pr2 (towards max-s1pr2-patch)\n  set cur-angle heading\n  set x angle-to-s1pr2 - cur-angle\n  if x < 0 [\n    set x x + 360\n  ]\n  set y 360 - x\n  ifelse x < y\n  [ set rt-turn rt-turn + x * s1pr2-weight ]\n  [ set lt-turn lt-turn + y * s1pr2-weight ]\n\n  let cxcr5-weight cxcr5-level / 100\n  let max-cxcl13-patch max-one-of neighbors [cxcl13-level]  ;; or neighbors4\n  let angle-to-cxcl13 (towards max-cxcl13-patch)\n  set cur-angle heading\n  set x angle-to-cxcl13 - cur-angle\n  if x < 0 [\n    set x x + 360\n  ]\n  set y 360 - x\n  ifelse x < y\n  [ set rt-turn rt-turn + x * cxcr5-weight ]\n  [ set lt-turn lt-turn + y * cxcr5-weight ]\n\n  let ccr7-weight ccr7-level / 100\n  let max-ccr7-patch max-one-of neighbors [ccl19-level]  ;; or neighbors4\n  let angle-to-ccr7 (towards max-ccr7-patch)\n  set cur-angle heading\n  set x angle-to-ccr7 - cur-angle\n  if x < 0 [\n    set x x + 360\n  ]\n  set y 360 - x\n  ifelse x < y\n  [ set rt-turn rt-turn + x * ccr7-weight ]\n  [ set lt-turn lt-turn + y * ccr7-weight ]\n\n  let ebi2r-weight ebi2r-level / 100\n  let max-ebi2r-patch max-one-of neighbors [ebi2-level]  ;; or neighbors4\n  let angle-to-ebi2r (towards max-ebi2r-patch)\n  set cur-angle heading\n  set x angle-to-ebi2r - cur-angle\n  if x < 0 [\n    set x x + 360\n  ]\n  set y 360 - x\n  ifelse x < y\n  [ set rt-turn rt-turn + x * ebi2r-weight ]\n  [ set lt-turn lt-turn + y * ebi2r-weight ]\n\n  rt rt-turn\n  lt lt-turn\nend",
            "function_name": "\"Chemotaxis Procedure\"",
            "variables_referenced": "[rt-turn, lt-turn, s1pr1-weight, max-s1p-patch, angle-to-s1p, cur-angle, x, y, s1pr2-weight, max-s1pr2-patch, angle-to-s1pr2, cxcr5-weight, max-cxcl13-patch, angle-to-cxcl13, cur-angle, x, y, ccr7-weight, max-ccr7-patch, angle-to-ccr7, cur-angle, x, y, ebi2r-weight, max-ebi2r-patch, angle-to-ebi2r, cur-angle, x]"
      },
      "57": {
            "code_block": "\nto move\n  rt random 50\n  lt random 50\n  fd 1\nend",
            "function_name": "\"Move Function\"",
            "variables_referenced": "[]"
      },
      "58": {
            "code_block": "\nto gc-move\n  rt random 50\n  lt random 50\n  fd 0.5\nend",
            "function_name": "\"GC Movement\"[",
            "variables_referenced": "[]"
      },
      "59": {
            "code_block": "\nto breg-move\n  rt random 50\n  lt random 50\n  if patch-ahead 1 != nobody [\n    if [patch-type] of patch-ahead 1 = 0 [\n      fd 1\n    ]\n  ]\nend",
            "function_name": "\"Breg Move Procedure\"",
            "variables_referenced": "[patch-type]"
      }
}