{
      "\u001b\"globals [\\n     system-oxy\\n     oxy-deficit\\n     total-infection\\n     total-TNF\\n     total-sTNFr\\n     total-IL-10\\n     total-IL-6\\n     total-GCSF\\n     step\\n     time\\n     loop-run\\n     total-pro-TH1\\n     total-pro-TH2\\n     ]\\n\\n\": \"The given NetLogo code block declares several global variables. Here's an overview of the code and the variables it uses:\\n\\n1. The overall function of the code is to define and initialize the global variables that will be used in the NetLogo model.\\n\\nVariables:\\n1. system-oxy: A global variable to store the system's oxygen level.\\n2. oxy-deficit: A global variable to store the oxygen deficit.\\n3. total-infection: A global variable to keep track of the total infection in the model.\\n4. total-TNF: A global variable to store the total concentration of TNF (Tumor Necrosis Factor).\\n5. total-sTNFr: A global variable to store the total concentration of sTNFr (soluble Tumor Necrosis Factor receptor).\\n6. total-IL-10: A global variable to store the total concentration of IL-10 (Interleukin 10).\\n7. total-IL-6: A global variable to store the total concentration of IL-6 (Interleukin 6).\\n8. total-GCSF: A global variable to store the total concentration of GCSF (Granulocyte Colony-stimulating Factor).\\n9. step: A global variable to store the current simulation step.\\n10. time: A global variable to store the simulation time.\\n11. loop-run: A global variable to control the loop runs.\\n12. total-pro-TH1: A global variable to store the total concentration of pro-TH1 cells.\\n13. total-pro-TH2: A global variable to store the total concentration of pro-TH2 cells.\\n\\nThe code does not actually manipulate or change the values of these variables directly within this block. Instead, it simply declares and initializes them for later use in the simulation.\"\n": "// C++ header file declaration for the NetLogo Global Variables\n\n#ifndef GLOBAL_VARIABLES_H\n#define GLOBAL_VARIABLES_H\n\n#include <iostream>\n#include <vector>\n\nnamespace netlogo_global_variables {\n\n/**\n * Class containing all global variables used in the NetLogo simulation.\n */\nclass GlobalVariables {\nprivate:\n    double system_oxy;          ///< The system's oxygen level.\n    double oxy_deficit;         ///< The oxygen deficit.\n    double total_infection;     ///< The total infection in the model.\n    double total_TNF;           ///< The total concentration of TNF (Tumor Necrosis Factor).\n    double total_sTNFr;         ///< The total concentration of sTNFr (soluble Tumor Necrosis Factor receptor).\n    double total_IL_10;        ///< The total concentration of IL-10 (Interleukin 10).\n    double total_IL_6;          ///< The total concentration of IL-6 (Interleukin 6).\n    double total_GCSF;          ///< The total concentration of GCSF (Granulocyte Colony-stimulating Factor).\n    int step;                  ///< The current simulation step.\n    int time;                  ///< The simulation time.\n    int loop_run;              ///< The loop runs indicator.\n    double total_pro_TH1;       ///< The total concentration of pro-TH1 cells.\n    double total_pro_TH2;       ///< The total concentration of pro-TH2 cells.\n\npublic:\n    /** constructor */\n    GlobalVariables();\n    /** Getter and Setter for system_oxy */\n    double getSystemOxygenLevel() const { return system_oxy; }\n    void setSystemOxygenLevel(double newValue) { system_oxy = newValue; }\n    /** Getter and Setter for oxy_deficit */\n    double getOxygenDeficit() const { return oxy_deficit; }\n    void setOxygenDeficit(double newValue) { oxy_deficit = newValue; }\n    /** Getter and Setter for total_infection */\n    double getTotalInfection() const { return total_infection; }\n    void setTotalInfection(double newValue) { total_infection = newValue; }\n    /** Getter and Setter for total_TNF */\n    double getTotalTNF() const { return total_TNF; }\n    void setTotalTNF(double newValue) { total_TNF = newValue; }\n    /** Getter and Setter for total_sTNFr */\n    double getTotalSTNFr() const { return total_sTNFr; }\n    void setTotalSTNFr(double newValue) { total_sTNFr = newValue; }\n    /** Getter and Setter for total_IL_10 */\n    double getTotalIL10() const { return total_IL_10; }\n    void setTotalIL10(double newValue) { total_IL_10 = newValue; }\n    /** Getter and Setter for total_IL_6 */\n    double getTotalIL6() const { return total_IL_6; }\n    void setTotalIL6(double newValue) { total_IL_6 = newValue; }\n    /** Getter and Setter for total_GCSF */\n    double getTotalGCSF() const { return total_GCSF; }\n    void setTotalGCSF(double newValue) { total_GCSF = newValue; }\n    /** Getter and Setter for step */\n    int getStep() const { return step; }\n    void setStep(int newValue) { step = newValue; }\n    /** Getter and Setter for time */\n    int getTime() const { return time; }\n    void setTime(int newValue) { time = newValue; }\n    /** Getter and Setter for loop_run */\n    int getLoopRun() const { return loop_run; }\n    void setLoopRun(int newValue) { loop_run = newValue; }\n    /** Getter and Setter for total_pro_TH1 */\n    double getTotalProTH1() const { return total_pro_TH1; }\n    void setTotalProTH1(double newValue) { total_pro_TH1 = newValue; }\n    /** Getter and Setter for total_pro\n    TH2 */\n    double getTotalProTH2() const { return total_pro_TH2; }\n    void setTotalProTH2(double newValue) { total_pro_TH2 = newValue; }\n};\n\n} // netlogo_global_variables\n\n#endif // GLOBAL_VARIABLES_H",
      "\"\\nbreed [ injs inj ]\\nbreed [ pmns pmn ]\\nbreed [ bands band ]\\nbreed [ pmn-marrows pmn-marrow ]\\nbreed [ monos mono ]\\nbreed [ mono-marrows mono-marrow ]\\nbreed [ gen-mono-marrows gen-mono-marrow ]\\nbreed [ TH0-germs TH0-germ ]\\nbreed [ TH0s TH0 ]\\nbreed [ TH1s TH1 ]\\nbreed [ TH1-germs TH1-germ ]\\nbreed [ TH2s TH2 ]\\nbreed [ TH2-germs TH2-germ ]\\nbreed [ NKs NK ]\\n\": \"The given NetLogo code block uses the `breed` command to create several different types of turtles or entities in the model. Here's an overview of the code and the different turtle breeds it declares:\\n\\n1. The overall function of the code is to define various turtle breeds for use in the NetLogo model.\\n\\nTurtle Breeds:\\n1. injs: Represents injury sites in the model.\\n2. inj: Represents individual injuries.\\n3. pmns: Represents neutrophils (PMNs).\\n4. pmn: A single PMN entity.\\n5. bands: Represents bands of tissue in the model.\\n6. band: A single band entity.\\n7. pmn-marrows: Represents PMN-producing marrow.\\n8. pmn-marrow: A single PMN-marrow entity.\\n9. monos: Represents monocytes.\\n10. mono: A single monocyte entity.\\n11. mono-marrows: Represents monocyte-producing marrow.\\n12. mono-marrow: A single mono-marrow entity.\\n13. gen-mono-marrows: Represents generic monocyte-producing marrow.\\n14. gen-mono-marrow: A single gen-mono-marrow entity.\\n15. TH0-germs: Represents TH0 germs.\\n16. TH0-germ: A single TH0-germ entity.\\n17. TH0s: Represents TH0 cells.\\n18. TH1s: Represents TH1 cells.\\n19. TH1-germs: Represents TH1 germs.\\n20. TH1-germ: A single TH1-germ entity.\\n21. TH2s: Represents TH2 cells.\\n22. TH2-germs: Represents TH2 germs.\\n23. TH2-germ: A single TH2-germ entity.\\n24. NKs: Represents NK cells.\\n25. NK: A single NK cell entity.\\n\\nThese breeds define distinct types of entities in the model, which can have their own unique attributes and behavior rules.\"\n": "// C++ header file declarations for the NetLogo turtle breeds\n\n#ifndef TURTLE_BREEDS_H\n#define TURTLE_BREEDS_H\n\n#include <string>\n#include <map>\n\nnamespace netlogo_turtle_breeds {\n\n/**\n * Class containing all the NetLogo turtle breeds and their associated names.\n */\nclass TurtleBreeds {\nprivate:\n    std::map<std::string, std::string> breedTypes;\n\npublic:\n    /** constructor */\n    TurtleBreeds();\n    /** Getter for breed with given name */\n    const std::string& getBreedName(const std::string& breedName) const;\n};\n\n} // netlogo_turtle_breeds\n\n#endif // TURTLE_BREEDS_H\n\n// TurtleBreeds.h\n#include \"TurtleBreeds.h\"\n#include <string>\n#include <map>\n\nnamespace netlogo_turtle_breeds {\n\nclass TurtleBreeds {\nprivate:\n    std::map<std::string, std::string> breedTypes;\n\npublic:\n    /** constructor */\n    TurtleBreeds() {\n        breedTypes = {{\"injs\", \"inj\"},\n                      {\"pmns\", \"pmn\"},\n                      {\"bands\", \"band\"},\n                      {\"pmn-marrows\", \"pmn-marrow\"},\n                      {\"monos\", \"mono\"},\n                      {\"mono-marrows\", \"mono-marrow\"},\n                      {\"gen-mono-marrows\", \"gen-mono-marrow\"},\n                      {\"TH0-germs\", \"TH0-germ\"},\n                      {\"TH0s\", \"TH0\"},\n                      {\"TH1s\", \"TH1\"},\n                      {\"TH1-germs\", \"TH1-germ\"},\n                      {\"TH2s\", \"TH2\"},\n                      {\"TH2-germs\", \"TH2-germ\"},\n                      {\"NKs\", \"NK\"}};\n    }\n    /** Getter for breed with given name */\n    const std::string& getBreedName(const std::string& breedName) const {\n        auto it = breedTypes.find(breedName);\n        if (it != breedTypes.cend()) {\n            return it->second;\n        }\n        throw std::invalid_argument(\"Invalid breed name provided.\");\n    }\n};\n\n} // netlogo_turtle_breeds"
}